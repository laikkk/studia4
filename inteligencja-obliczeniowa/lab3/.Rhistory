 45*678
x = c(7, 4, 2, 0, 9)
x
y = c(2, 1, 5, 3, 3)
sum(x)
d = c(sum(x),sum(y))
d
e = x + y
e
f = x*y
f
maciez1 = matrix(c(0,2,1,1,6,4,5,6,3),3,3)
maciez1
maciez1 = matrix(c(0,2,1),c(1,6,4),c(5,6,3))
maciez1 = matrix(c(0,2,1),c(1,6,4),c(5,6,3),3,3)
maciez1 = matrix(c(0,2,1),c(1,6,4),c(5,6,3))
maciez1 = matrix(c(0,1,5,2,6,0,1,4,3),3,3)
maciez1
maciez2 = matrix(c(9,1,4,8,2,9,7,7,2),3,3)
maciez2
maciez1 %*% maciez2
myfunc = function(a,b){
return a+b
}
myfunc = function(a,b){ return a+b }
myfunc = function(a,b){ return(a+b) }
myfunc(1,1)
save.image("C:\\Users\\kamilzie\\Desktop\\InteligencjaObliczeniowa\\1lab.RData")
q()
setwd("C:/git/studia4/inteligencja-obliczeniowa/lab3/")
#zad1
#a) Wczytaj za³¹czon¹ bazê danych irysów i zapisz je pod nazw¹ iris.original. SprawdŸ jak wygl¹daj¹ dane
iris.original = read.csv("iris.csv")
#b) ZnajdŸ komendê badaj¹c¹ korelacjê i dokonaj porównania ka¿dej numerycznej kolumny z ka¿d¹ inn¹ numeryczn¹ (4 kolumny, co daje ³¹cznie 6 porównañ)
# 1,2
# 1,3
# 1,4
# 2,3
# 2,4
# 3,2
cor(iris[1],iris[2],method= "pearson") #brak
cor(iris[1],iris[3],method= "pearson") #silna
cor(iris[1],iris[4],method= "pearson") #silna
cor(iris[2],iris[3],method= "pearson") #slaba
cor(iris[2],iris[4],method= "pearson") #slaba
cor(iris[3],iris[2],method= "pearson") #slaba
#c) Czy w ka¿dym z przypadków korelacja by³a dodatnia czy ujemna? Czy by³a silna (0.7-1), s³aba (0.2-0.7) czy w ogóle jej brak³o (0-0.2)? Zinterpretuj wyniki. (ODP WYZEJ)
#zad2
#a)
iris.numeric = iris.original 
iris.numeric[5] = NULL
#b)
iris.log.numeric = log(iris.numeric)
#c)
iris.preproc = scale(iris.log.numeric)
#zad3
#a)
iris.pca = prcomp(iris.preproc)
#b) 
iris.pca
#Wariancja (w wielkim uproszczeniu, bez uwzglêdnienia obci¹¿enia estymatora) jest to odchylenie standardowe podniesione do kwadratu. ednak¿e w procesie obliczeñ to wariancja jest pierwsza. Najpierw obliczamy wariancjê, a dopiero wtedy odchylenie standardowe, wyci¹gaj¹c pierwiastek z wartoœci wariancji.
#usuwamy pc3 pc4 bo maja najmiejsza wartosc 
#iris.pca[1] iris.pca[2]
iris.pca.data[1:2] #pokaze nam tylko pc1 i pc2
#c)
predict(iris.pca) # kombinacj¹ liniow¹ danych wejœciowych
#Wskazówka: sprawdŸ czy pierwsza liczba z predict(iris.pca) powstaje przez pomno¿enie pierwszego wiersza macierzy iris.preproc z pierwsza kolumn¹ macierzy iris.pca[2].
#Wskazówka: sprawdŸ czy pierwsza liczba z predict(iris.pca) powstaje przez pomno¿enie pierwszego wiersza macierzy iris.preproc z pierwsza kolumn¹ macierzy iris.pca[2]
#d) spojrzec gdzie sa najwieksze wartosc (oczywiscie abs())
iris.pca
#e) 
iris.pca.data <- cbind(predict(iris.pca)[,1:2], iris[5])
iris.pca.data
#zad4
factor <- as.factor(iris.pca.data[,3])
plot(iris.pca.data[1:2], col=factor, pch = 19)
legend(-1,3.3,legend=unique(iris.pca.data[,3]),col=1:3,title="Flovers", pch=19)
recognizeIris = function(SeplLength,SepalWidth,PetalLength,PetalWidth){
#zlogarytmowaæ cztery parametry na wejœciu
SeplLength.log  = log(SeplLength)
SepalWidth.log  = log(SepalWidth)
PetalLength.log = log(PetalLength)
PetalWidth.log  = log(PetalWidth)
#ustandaryzowaæ wszystkie cztery parametry wzorem: ( parametr – œrednia_parametru_z_tabeli ) / odchyl_stand_parametru_z_tabeli 
lsl = log(SeplLength)
sre = mean(log(iris.original)[1])
ss = sd(log(iris.original)[1])
sksl = (lsl-sre)/ss
lsl = log(SepalWidth)
sre = mean(log(iris.original)[2])
ss = sd(log(iris.original)[2])
sksw = (lsl-sre)/ss
lsl = log(PetalLength)
sre = mean(log(iris.original)[3])
ss = sd(log(iris.original)[3])
skpl = (lsl-sre)/ss
lsl = log(PetalWidth)
sre = mean(log(iris.original)[4])
ss = sd(log(iris.original)[4])
skpw = (lsl-sre)/ss
###
w = c(sksl,sksw,skpl,skpw)
#• dane po takim preprocessingu nale¿y zamieniæ na dwa parametry: PC1 i PC2 obliczaj¹c je na podstawie tabeli wspó³czynników z iris.pca[2]
# Na koñcu dodajemy punkt na wykresie i patrzymy do jakiej grupy irysów najbli¿ej.
return(w)
}
recognizeIris(6.9, 3.2, 5.6, 2.2)
iris.original
recognizeIris(6.9, 3.2, 5.6, 2.2)
recognizeIris = function(SeplLength,SepalWidth,PetalLength,PetalWidth){
#zlogarytmowaæ cztery parametry na wejœciu
#ustandaryzowaæ wszystkie cztery parametry wzorem: ( parametr – œrednia_parametru_z_tabeli ) / odchyl_stand_parametru_z_tabeli 
lsl = log(SeplLength)
sre = mean(log(iris.original)[1])
# ss = sd(log(iris.original)[1])
# sksl = (lsl-sre)/ss
# lsl = log(SepalWidth)
# sre = mean(log(iris.original)[2])
# ss = sd(log(iris.original)[2])
# sksw = (lsl-sre)/ss
# lsl = log(PetalLength)
# sre = mean(log(iris.original)[3])
# ss = sd(log(iris.original)[3])
# skpl = (lsl-sre)/ss
# lsl = log(PetalWidth)
# sre = mean(log(iris.original)[4])
# ss = sd(log(iris.original)[4])
# skpw = (lsl-sre)/ss
##
# w = c(sksl,sksw,skpl,skpw)
#• dane po takim preprocessingu nale¿y zamieniæ na dwa parametry: PC1 i PC2 obliczaj¹c je na podstawie tabeli wspó³czynników z iris.pca[2]
# Na koñcu dodajemy punkt na wykresie i patrzymy do jakiej grupy irysów najbli¿ej.
return(sre)
}
recognizeIris(6.9, 3.2, 5.6, 2.2)
sre = mean(log(iris.original)[1])
sre = mean(log(iris.original))
sre = mean( log(iris.original[1]) )
log(iris.original)
log(iris.original[1])
sre = mean( log(iris.original[1]) )
log(iris.orginal[1])
test = log(iris.original[1])
mean(test)
test
mean(test)
mean(c(1,2,3))
class(test)
test[1]
mean(test[1])
mean(as.vector(test))
as.vector(test)
as.vector(test)
mean( as.vector(test) )
mean(test, na.rm = TRUE)
mean(test[1], na.rm = TRUE)
test[1]
mean(test[1], na.rm=TRUE)
mean(test, na.rm=TRUE
)
mean(test[1])
mean(test$sepallength)
mean(test[1])
sre = mean(log(iris.original)$sepallength)
paramLog = log(SeplLength)
paramLog = log(12)
sre = mean(log(iris.original)[1])
log(iris.original)
log(iris.original)
log(iris.original[1])
sre = mean(log(iris.original[1]))
sre = mean((log(iris.original[1]))[1])
sre = mean((log(iris.original[1]))$sepallength)
sre
ss = sd((log(iris.original[1]))$sepallength)
ss
recognizeIris = function(SeplLength,SepalWidth,PetalLength,PetalWidth){
#zlogarytmowaæ cztery parametry na wejœciu
#ustandaryzowaæ wszystkie cztery parametry wzorem: ( parametr – œrednia_parametru_z_tabeli ) / odchyl_stand_parametru_z_tabeli 
paramLog = log(SeplLength)
sre = mean((log(iris.original[1]))$sepallength)
ss = sd((log(iris.original[1]))$sepallength)
sksl = (paramLog-sre)/ss
paramLog = log(SepalWidth)
sre = mean((log(iris.original[2]))$sepalwidth)
ss = sd((log(iris.original[2]))$sepalwidth)
sksw = (paramLog-sre)/ss
paramLog = log(PetalLength)
sre = mean((log(iris.original[3]))$petallength)
ss = sd((log(iris.original[3]))$petallength)
skpl = (paramLog-sre)/ss
paramLog = log(PetalWidth)
sre = mean((log(iris.original[4]))$petalwidth)
ss = sd((log(iris.original[4]))$petalwidth)
skpw = (paramLog-sre)/ss
##
w = c(sksl,sksw,skpl,skpw)
#• dane po takim preprocessingu nale¿y zamieniæ na dwa parametry: PC1 i PC2 obliczaj¹c je na podstawie tabeli wspó³czynników z iris.pca[2]
# Na koñcu dodajemy punkt na wykresie i patrzymy do jakiej grupy irysów najbli¿ej.
return(w)
}
recognizeIris(6.9, 3.2, 5.6, 2.2)
iris.pca[2]
iris.pca[2][1]
iris.pca[2][2]
iris.pca[2][1][1]
iris.rotation
iris.pca[2]$rotation
iris.pca[2]$rotation[1]
iris.pca[2]$rotation[,1]
iris.pca[2]$rotation[,1] * w
iris.pca[2]$rotation
recognizeIris = function(SeplLength,SepalWidth,PetalLength,PetalWidth){
#zlogarytmowaæ cztery parametry na wejœciu
#ustandaryzowaæ wszystkie cztery parametry wzorem: ( parametr – œrednia_parametru_z_tabeli ) / odchyl_stand_parametru_z_tabeli 
paramLog = log(SeplLength)
sre = mean((log(iris.original[1]))$sepallength)
ss = sd((log(iris.original[1]))$sepallength)
sksl = (paramLog-sre)/ss
paramLog = log(SepalWidth)
sre = mean((log(iris.original[2]))$sepalwidth)
ss = sd((log(iris.original[2]))$sepalwidth)
sksw = (paramLog-sre)/ss
paramLog = log(PetalLength)
sre = mean((log(iris.original[3]))$petallength)
ss = sd((log(iris.original[3]))$petallength)
skpl = (paramLog-sre)/ss
paramLog = log(PetalWidth)
sre = mean((log(iris.original[4]))$petalwidth)
ss = sd((log(iris.original[4]))$petalwidth)
skpw = (paramLog-sre)/ss
##
w = c(sksl,sksw,skpl,skpw)
#• dane po takim preprocessingu nale¿y zamieniæ na dwa parametry: PC1 i PC2 obliczaj¹c je na podstawie tabeli wspó³czynników z iris.pca[2]
PC1 = iris.pca[2]$rotation[,1] * w
PC1
PC2 = iris.pca[2]$rotation[,2] * w
PC2
# Na koñcu dodajemy punkt na wykresie i patrzymy do jakiej grupy irysów najbli¿ej.
#points
return(w)
}
recognizeIris(6.9, 3.2, 5.6, 2.2)
recognizeIris = function(SeplLength,SepalWidth,PetalLength,PetalWidth){
#zlogarytmowaæ cztery parametry na wejœciu
#ustandaryzowaæ wszystkie cztery parametry wzorem: ( parametr – œrednia_parametru_z_tabeli ) / odchyl_stand_parametru_z_tabeli 
paramLog = log(SeplLength)
sre = mean((log(iris.original[1]))$sepallength)
ss = sd((log(iris.original[1]))$sepallength)
sksl = (paramLog-sre)/ss
paramLog = log(SepalWidth)
sre = mean((log(iris.original[2]))$sepalwidth)
ss = sd((log(iris.original[2]))$sepalwidth)
sksw = (paramLog-sre)/ss
paramLog = log(PetalLength)
sre = mean((log(iris.original[3]))$petallength)
ss = sd((log(iris.original[3]))$petallength)
skpl = (paramLog-sre)/ss
paramLog = log(PetalWidth)
sre = mean((log(iris.original[4]))$petalwidth)
ss = sd((log(iris.original[4]))$petalwidth)
skpw = (paramLog-sre)/ss
##
w = c(sksl,sksw,skpl,skpw)
print(w)
#• dane po takim preprocessingu nale¿y zamieniæ na dwa parametry: PC1 i PC2 obliczaj¹c je na podstawie tabeli wspó³czynników z iris.pca[2]
PC1 = iris.pca[2]$rotation[,1] * w
print(PC1)
PC2 = iris.pca[2]$rotation[,2] * w
print(PC2)
# Na koñcu dodajemy punkt na wykresie i patrzymy do jakiej grupy irysów najbli¿ej.
#points
return(w)
}
recognizeIris(6.9, 3.2, 5.6, 2.2)
recognizeIris = function(SeplLength,SepalWidth,PetalLength,PetalWidth){
#zlogarytmowaæ cztery parametry na wejœciu
#ustandaryzowaæ wszystkie cztery parametry wzorem: ( parametr – œrednia_parametru_z_tabeli ) / odchyl_stand_parametru_z_tabeli 
paramLog = log(SeplLength)
sre = mean((log(iris.original[1]))$sepallength)
ss = sd((log(iris.original[1]))$sepallength)
sksl = (paramLog-sre)/ss
paramLog = log(SepalWidth)
sre = mean((log(iris.original[2]))$sepalwidth)
ss = sd((log(iris.original[2]))$sepalwidth)
sksw = (paramLog-sre)/ss
paramLog = log(PetalLength)
sre = mean((log(iris.original[3]))$petallength)
ss = sd((log(iris.original[3]))$petallength)
skpl = (paramLog-sre)/ss
paramLog = log(PetalWidth)
sre = mean((log(iris.original[4]))$petalwidth)
ss = sd((log(iris.original[4]))$petalwidth)
skpw = (paramLog-sre)/ss
##
w = c(sksl,sksw,skpl,skpw)
#print(w)
#• dane po takim preprocessingu nale¿y zamieniæ na dwa parametry: PC1 i PC2 obliczaj¹c je na podstawie tabeli wspó³czynników z iris.pca[2]
PC1 = iris.pca[2]$rotation[,1] %*% w
print(PC1)
PC2 = iris.pca[2]$rotation[,2] %*% w
print(PC2)
# Na koñcu dodajemy punkt na wykresie i patrzymy do jakiej grupy irysów najbli¿ej.
#points
return(w)
}
recognizeIris(6.9, 3.2, 5.6, 2.2)
PC1= 1.602726
PC2=-0.9772038
points(PC1,PC2)
points(PC1,PC2,col=sample(rainbow(10)))
points(PC1,PC2,col=sample(rainbow(10)))
points(PC1,PC2,col=sample(rainbow(10)))
points(PC1,PC2,col=sample(rainbow(10)))
points(PC1,PC2,col=sample(rainbow(10)))
points(PC1,PC2,col=sample(rainbow(10)))
points(PC1,PC2,col=sample(rainbow(10)))
points(PC1,PC2,col=sample(rainbow(10)))
points(PC1,PC2,col=sample(rainbow(10)),pch=21:25)
points(PC1,PC2,col=sample(rainbow(10)),pch=21:25)
21:25
points(PC1,PC2,col=sample(rainbow(10)),pch=21:25)
points(PC1,PC2,col=sample(rainbow(10)),bg=21:25)
points(PC1,PC2,col=sample(rainbow(10)),bg=21:25)
points(PC1,PC2,col=sample(rainbow(10)),bg=21:25)
points(PC1,PC2,col=sample(rainbow(10)),bg=21:25)
points(PC1,PC2,col=sample(rainbow(10)),bg=21:25)
points(PC1,PC2,col=sample(rainbow(10)),bg=21:25)
points(PC1,PC2,col=sample(rainbow(10)),bg=21:25)
points(PC1,PC2,col=sample(rainbow(10)),bg=21:25)
points(PC1,PC2,col=sample(rainbow(10)),pch=19)
points(PC1,PC2,col=sample(rainbow(10)),pch=19)
points(PC1,PC2,col=sample(rainbow(10)),pch=19)
points(PC1,PC2,col=sample(rainbow(10)),pch=19)
points(PC1,PC2,col=sample(rainbow(10)),pch=19)
points(PC1,PC2,col=sample(rainbow(10)),pch=19)
recognizeIris(6.0, 2.6, 4.4, 1.6)
recognizeIris = function(SeplLength,SepalWidth,PetalLength,PetalWidth){
#zlogarytmowaæ cztery parametry na wejœciu
#ustandaryzowaæ wszystkie cztery parametry wzorem: ( parametr – œrednia_parametru_z_tabeli ) / odchyl_stand_parametru_z_tabeli 
paramLog = log(SeplLength)
sre = mean((log(iris.original[1]))$sepallength)
ss = sd((log(iris.original[1]))$sepallength)
sksl = (paramLog-sre)/ss
paramLog = log(SepalWidth)
sre = mean((log(iris.original[2]))$sepalwidth)
ss = sd((log(iris.original[2]))$sepalwidth)
sksw = (paramLog-sre)/ss
paramLog = log(PetalLength)
sre = mean((log(iris.original[3]))$petallength)
ss = sd((log(iris.original[3]))$petallength)
skpl = (paramLog-sre)/ss
paramLog = log(PetalWidth)
sre = mean((log(iris.original[4]))$petalwidth)
ss = sd((log(iris.original[4]))$petalwidth)
skpw = (paramLog-sre)/ss
##
w = c(sksl,sksw,skpl,skpw)
#print(w)
#• dane po takim preprocessingu nale¿y zamieniæ na dwa parametry: PC1 i PC2 obliczaj¹c je na podstawie tabeli wspó³czynników z iris.pca[2]
PC1 = iris.pca[2]$rotation[,1] %*% w
#print(PC1)
PC2 = iris.pca[2]$rotation[,2] %*% w
#print(PC2)
# Na koñcu dodajemy punkt na wykresie i patrzymy do jakiej grupy irysów najbli¿ej.
#points
points(PC1,PC2,col=sample(rainbow(10)),pch=19)
return(c(PC1,PC2)
}
recognizeIris = function(SeplLength,SepalWidth,PetalLength,PetalWidth){
#zlogarytmowaæ cztery parametry na wejœciu
#ustandaryzowaæ wszystkie cztery parametry wzorem: ( parametr – œrednia_parametru_z_tabeli ) / odchyl_stand_parametru_z_tabeli 
paramLog = log(SeplLength)
sre = mean((log(iris.original[1]))$sepallength)
ss = sd((log(iris.original[1]))$sepallength)
sksl = (paramLog-sre)/ss
paramLog = log(SepalWidth)
sre = mean((log(iris.original[2]))$sepalwidth)
ss = sd((log(iris.original[2]))$sepalwidth)
sksw = (paramLog-sre)/ss
paramLog = log(PetalLength)
sre = mean((log(iris.original[3]))$petallength)
ss = sd((log(iris.original[3]))$petallength)
skpl = (paramLog-sre)/ss
paramLog = log(PetalWidth)
sre = mean((log(iris.original[4]))$petalwidth)
ss = sd((log(iris.original[4]))$petalwidth)
skpw = (paramLog-sre)/ss
##
w = c(sksl,sksw,skpl,skpw)
#print(w)
#• dane po takim preprocessingu nale¿y zamieniæ na dwa parametry: PC1 i PC2 obliczaj¹c je na podstawie tabeli wspó³czynników z iris.pca[2]
PC1 = iris.pca[2]$rotation[,1] %*% w
#print(PC1)
PC2 = iris.pca[2]$rotation[,2] %*% w
#print(PC2)
# Na koñcu dodajemy punkt na wykresie i patrzymy do jakiej grupy irysów najbli¿ej.
#points
points(PC1,PC2,col=sample(rainbow(10)),pch=19)
return(c(PC1,PC2))
}
recognizeIris(6.9, 3.2, 5.6, 2.2)
recognizeIris(6.0, 2.6, 4.4, 1.6)
recognizeIris(4.8, 3.6, 1.4, 0.2)
setwd("C:/git/studia4/inteligencja-obliczeniowa/lab3/")
#zad1
#a) Wczytaj za³¹czon¹ bazê danych irysów i zapisz je pod nazw¹ iris.original. SprawdŸ jak wygl¹daj¹ dane
iris.original = read.csv("iris.csv")
#b) ZnajdŸ komendê badaj¹c¹ korelacjê i dokonaj porównania ka¿dej numerycznej kolumny z ka¿d¹ inn¹ numeryczn¹ (4 kolumny, co daje ³¹cznie 6 porównañ)
# 1,2
# 1,3
# 1,4
# 2,3
# 2,4
# 3,2
cor(iris[1],iris[2],method= "pearson") #brak
cor(iris[1],iris[3],method= "pearson") #silna
cor(iris[1],iris[4],method= "pearson") #silna
cor(iris[2],iris[3],method= "pearson") #slaba
cor(iris[2],iris[4],method= "pearson") #slaba
cor(iris[3],iris[2],method= "pearson") #slaba
#c) Czy w ka¿dym z przypadków korelacja by³a dodatnia czy ujemna? Czy by³a silna (0.7-1), s³aba (0.2-0.7) czy w ogóle jej brak³o (0-0.2)? Zinterpretuj wyniki. (ODP WYZEJ)
#zad2
#a)
iris.numeric = iris.original 
iris.numeric[5] = NULL
#b)
iris.log.numeric = log(iris.numeric)
#c)
iris.preproc = scale(iris.log.numeric)
#zad3
#a)
iris.pca = prcomp(iris.preproc)
#b) 
iris.pca
#Wariancja (w wielkim uproszczeniu, bez uwzglêdnienia obci¹¿enia estymatora) jest to odchylenie standardowe podniesione do kwadratu. ednak¿e w procesie obliczeñ to wariancja jest pierwsza. Najpierw obliczamy wariancjê, a dopiero wtedy odchylenie standardowe, wyci¹gaj¹c pierwiastek z wartoœci wariancji.
#usuwamy pc3 pc4 bo maja najmiejsza wartosc 
#iris.pca[1] iris.pca[2]
iris.pca.data[1:2] #pokaze nam tylko pc1 i pc2
#c)
predict(iris.pca) # kombinacj¹ liniow¹ danych wejœciowych
#Wskazówka: sprawdŸ czy pierwsza liczba z predict(iris.pca) powstaje przez pomno¿enie pierwszego wiersza macierzy iris.preproc z pierwsza kolumn¹ macierzy iris.pca[2].
#Wskazówka: sprawdŸ czy pierwsza liczba z predict(iris.pca) powstaje przez pomno¿enie pierwszego wiersza macierzy iris.preproc z pierwsza kolumn¹ macierzy iris.pca[2]
#d) spojrzec gdzie sa najwieksze wartosc (oczywiscie abs())
iris.pca
#e) 
iris.pca.data <- cbind(predict(iris.pca)[,1:2], iris[5])
iris.pca.data
#zad4
factor <- as.factor(iris.pca.data[,3])
plot(iris.pca.data[1:2], col=factor, pch = 19)
legend(-1,3.3,legend=unique(iris.pca.data[,3]),col=1:3,title="Flovers", pch=19)
#zad5
recognizeIris = function(SeplLength,SepalWidth,PetalLength,PetalWidth){
#zlogarytmowaæ cztery parametry na wejœciu
#ustandaryzowaæ wszystkie cztery parametry wzorem: ( parametr – œrednia_parametru_z_tabeli ) / odchyl_stand_parametru_z_tabeli 
paramLog = log(SeplLength)
sre = mean((log(iris.original[1]))$sepallength)
ss = sd((log(iris.original[1]))$sepallength)
sksl = (paramLog-sre)/ss
paramLog = log(SepalWidth)
sre = mean((log(iris.original[2]))$sepalwidth)
ss = sd((log(iris.original[2]))$sepalwidth)
sksw = (paramLog-sre)/ss
paramLog = log(PetalLength)
sre = mean((log(iris.original[3]))$petallength)
ss = sd((log(iris.original[3]))$petallength)
skpl = (paramLog-sre)/ss
paramLog = log(PetalWidth)
sre = mean((log(iris.original[4]))$petalwidth)
ss = sd((log(iris.original[4]))$petalwidth)
skpw = (paramLog-sre)/ss
##
w = c(sksl,sksw,skpl,skpw)
#print(w)
#• dane po takim preprocessingu nale¿y zamieniæ na dwa parametry: PC1 i PC2 obliczaj¹c je na podstawie tabeli wspó³czynników z iris.pca[2]
PC1 = iris.pca[2]$rotation[,1] %*% w
#print(PC1)
PC2 = iris.pca[2]$rotation[,2] %*% w
#print(PC2)
# Na koñcu dodajemy punkt na wykresie i patrzymy do jakiej grupy irysów najbli¿ej.
#points
points(PC1,PC2,col=sample(rainbow(10)),pch=19)
return(c(PC1,PC2))
}
recognizeIris(6.9, 3.2, 5.6, 2.2) #virginica
recognizeIris(6.0, 2.6, 4.4, 1.6) #versicolor lub virginica
recognizeIris(4.8, 3.6, 1.4, 0.2) #setosa
q()
