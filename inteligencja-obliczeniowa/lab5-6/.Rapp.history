iris
iris <- read.csv(url("http://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data"), header = FALSE)
iris
names(iris) <- c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width", "Species")
iris
library(ggvis)
head(iris)
str(iris)
table(iris$Species)
round(prop.table(table(iris$Species)) * 100, digits = 1)
summary(iris)
summary(iris[c("Petal.Width", "Sepal.Width")])
library(class)
iris <- read.csv(url("http://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data"), header = FALSE)
names(iris) <- c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width", "Species")
round(prop.table(table(iris$Species)) * 100, digits = 1)
library(class)
normalize <- function(x) {#
num <- x - min(x)#
denom <- max(x) - min(x)#
return (num/denom)#
}
iris_norm <- as.data.frame(lapply(iris[1:4], normalize))
summary(iris_norm)
set.seed(1234)
ind <- sample(2, nrow(iris), replace=TRUE, prob=c(0.67, 0.33))
iris.training <- iris[ind==1, 1:4]
iris.test <- iris[ind==2, 1:4]
iris.trainLabels <- iris[ind==1, 5]
iris.testLabels <- iris[ind==2, 5]
iris_pred <- knn(train = iris.training, test = iris.test, cl = iris.trainLabels, k=3)
iris_pred
install.packages("gmodels")
library(gmodels)
CrossTable(x = iris.testLabels, y = iris_pred, prop.chisq=FALSE)
iris_pred
iris_test
iris.test
iris.trainLabels
iris.training
iris.testLabels
c[iris_prop,iris.testLabels]
c[iris_pred,iris.testLabels]
iris_pred + iris.testLabels
iris_pred + iris.testLabels.class
iris_pred + iris.testLabels
iris.testLabels.class
iris.testLabels.id
iris.testLabels
data$predict = iris_pred
data$predict = c[iris_pred]
iris_pred
info(iris_pred)
typesof(iris_pred)
typeof(iris_pred)
class(iris_pred)
class(iris.testLabels)
c(as.character(iris_pred[,2]), as.character(iris.testLabels) )
c(as.character(iris_pred), as.character(iris.testLabels) )
rbind(iris_pred, iris.testLabels)
iris_pred
head(iris_pred)
dataFrame$test <- iris_pred
dataFrame$test <- as.dataFrame(iris_pred)
dataFrame$test <- as.character(iris_pred)
test <- as.character(iris_pred
)
test
as.character(iris_pred) + as.character(iris.testLabels)
data.frame(as.character(iris_pred) , as.character(iris.testLabels))
for (index in 1:nrow(dataFrame)) { row = dataFrame[index, ]; # do stuff with the row }
źć
evaluations = data.frame(as.character(iris_pred) , as.character(iris.testLabels))
evaluations
for (index in 1:nrow(evaluations)) { row = evaluations[index, ]; row }
for (index in 1:nrow(evaluations)) { row = evaluations[index, ]; print(row) }
for (index in 1:nrow(evaluations)) { row = evaluations[index, ]; echo(row) }
data.frame(iris_pred, iris.testLabels)
evaluations = data.frame(iris_pred, iris.testLabels)
for (index in 1:nrow(evaluations)) { row = evaluations[index, ]; print(row) }
iris <- read.csv(url("http://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data"), header = FALSE) #
#
names(iris) <- c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width", "Species")#
#
summary(iris)#
#
library(class)#
#
normalize <- function(x) {#
num <- x - min(x)#
denom <- max(x) - min(x)#
return (num/denom)#
}#
#
iris_norm <- as.data.frame(lapply(iris[1:4], normalize))#
#
set.seed(1234)#
#
ind <- sample(2, nrow(iris), replace=TRUE, prob=c(0.67, 0.33))#
#
iris.training <- iris[ind==1, 1:4]#
#
iris.test <- iris[ind==2, 1:4]#
#
iris.trainLabels <- iris[ind==1, 5]#
#
iris.testLabels <- iris[ind==2, 5]#
#
iris_pred <- knn(train = iris.training, test = iris.test, cl = iris.trainLabels, k=3)#
#
#You see that the model makes reasonably accurate predictions, with the exception of one wrong classification in row 29, where "Versicolor” was predicted while the test label is “Virginica”.#
#
install.packages("gmodels")#
#
library(gmodels)#
#
evaluations = data.frame(iris_pred, iris.testLabels)#
#
#to do napisac funkcje ktora obliczy ile sie wierszy sie ze soba zgadza podac liczbe i procent np 39/40 98%#
for (index in 1:nrow(evaluations)) { row = evaluations[index, ]; print(row) } #
#
CrossTable(x = iris.testLabels, y = iris_pred, prop.chisq=FALSE)
install.packages("RWeka")
library(party)#
#
install.packages("partykit")#
library("partykit")#
#
install.packages('e1071')#
library(e1071)
str(iris)
iris_ctree <- ctree(Species ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width, data=iris)
library(e1071)#
library(class)#
#
iris <- read.csv(url("http://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data"), header = FALSE) #
names(iris) <- c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width", "Species")#
summary(iris)#
normalize <- function(x) {#
num <- x - min(x)#
denom <- max(x) - min(x)#
return (num/denom)#
}#
#
iris_norm <- as.data.frame(lapply(iris[1:4], normalize))#
set.seed(1234)#
ind <- sample(2, nrow(iris), replace=TRUE, prob=c(0.67, 0.33))#
#
iris.training <- iris[ind==1, 1:4]#
iris.test <- iris[ind==2, 1:4]#
iris.trainLabels <- iris[ind==1, 5]#
iris.testLabels <- iris[ind==2, 5]#
#
# naiveBayes(iris.training, iris.test)#
classifier<-naiveBayes(iris[,1:4], iris[,5]) #
table(predict(classifier, iris[,-5]), iris[,5])
package.install(neuralnet)
install.package("neuralnet")
install.packages('neuralnet')
n = c(2, 3, 5) #
s = c("aa", "bb", "cc") #
b = c(TRUE, FALSE, TRUE) #
df = data.frame(n, s, b)
df
siatk.nn <- neuralnet(gra~wiek+waga+wzrost, siatk.dane, hidden=2, lifesign="full")
install.packages('neuralnet')
siatk.nn <- neuralnet(gra~wiek+waga+wzrost, siatk.dane, hidden=2, lifesign="full")
library(neuralnet)
siatk.nn <- neuralnet(gra~wiek+waga+wzrost, siatk.dane, hidden=2, lifesign="full")
siatk.dane <- read.table(header=TRUE, text='#
	wiek waga wzrost gra#
	23 75 176 TRUE#
	25 67 180 TRUE#
	28 120 175 FALSE#
	22 65 165 TRUE#
	46 70 187 TRUE#
	50 68 180 FALSE#
	48 97 178 FALSE#
')
siatk.nn <- neuralnet(gra~wiek+waga+wzrost, siatk.dane, hidden=2, lifesign="full")
plot(siatk.nn)
myfunAktywacji <- function(x) {#
 return ( 1/(1+exp(-x)) )#
}#
#
WezelA <- function(wiek, waga, wzrost){#
#
	X = wiek * -0.46122 + waga * 0.97314 + wzrost * -0.39203 + 0.80109#
	X = myfunAktywacji(X)#
	return(X)#
}#
#
WezelB <- function(wiek, waga, wzrost){#
#
	X = wiek * -0.78548 + waga * 2.10584 + wzrost * -0.57847 + 0.43529#
	X = myfunAktywacji(X)#
	return(X)#
}#
#
WezelC <- function(wiek, waga, wzrost){#
A = WezelA(wiek, waga, wzrost)#
B = WezelB(wiek, waga, wzrost)#
X = A  * -0.81546 + B * 1.03775 + -0.2368#
#
	return(X)#
}
WezelC(23,75,176)
WezelC(25,67,180)
WezelC(48,97,178)
sqr(4)
sq(4)
sqrt(4)
sqrt( (5-2.75)^2 + (6-4)^2 )
sqrt( (7-2.75)^2 + (6-3.66)^2 )
sqrt( (7-5)^2 + (6-3.66)^2 )
getwd()
setwd('/Users/kamilzie/Documents/git/studia4/inteligencja-obliczeniowa/lab5-6')
getwd()
adultData <- read.csv("~/Downloads/adult.dat", sep = ",", na.strings=c("?"))#
nrow(adultData)
adult <- read.csv("adult.dat", sep = ",", header = FALSE)#
adult.delete = subset(adult, V1 != "?" & V2 != "?" & V3 != "?" & V4 != "?" & V5 != "?" & V6 != "?" & V7 != "?" & V8 != "?" & V9 != "?" & V10 != "?" & V11 != "?" & V12 != "?" & V13 != "?" & V14 != "?") #
cat('Przed usunięciem: ', nrow(adult), ' wierszy\n')#
cat('Po usunieciu: ', nrow(adult.delete), ' wierszy\n')
adultData <- read.csv("~/Downloads/adult.dat", sep = ",", na.strings=c("?"))#
nrow(adultData)
adult.delete <- adultData %>% na.omit()#
nrow(adult.delete)
getMean <- function(adult){#
	for (i in 1:nrow(adult)){#
		for (j in 1:ncol(adult)){#
			if (adult[i,j] == '?'){#
				try(adult[i,j] <- mean(as.numeric(adult[j])))#
			}#
		}#
	}#
	adult#
}#
adult.mean <- getMean(adult)
adult.mean
adultData <- read.csv("~/Downloads/adult.dat", sep = ",", na.strings=c("?"))
adultData
ina <- unlist(lapply(adultData, function(x) any(is.na(x))))
ina
ina <- unlist(lapply(adult, function(x) any(is.na(x))))
ina
adultData <- read.csv("~/Downloads/adult.dat", sep = ",", na.strings=c("?"))
adultData
adultData <- read.csv("~/Downloads/adult.dat", sep = ",")
adultData[2]
adultData <- read.csv("~/Downloads/adult.dat", sep = ",", na.strings=c("?"))#
nrow(adultData)
nrow(na.omit(adultData))
# Kolumny z NA#
ina <- unlist(lapply(adultData, function(x) any(is.na(x))))
ina
# Kolumn ktore sa numeric#
inu <- unlist(lapply(adultData, function(x) any(is.numeric(x))))
inu
# Kolumny gdzie da sie zrobic mean dla wartosci NA#
which(ina == inu & ina == TRUE)
# Kolumny gdzie da sie zrobic mean dla wartosci NA#
which(ina == inu & ina == TRUE)
adult.mean <- adultData
adult.mean.value <- adult.mean[is.na(adult.mean[,1]), 1] <- mean(adult.mean[,1], na.rm = TRUE)
adult.mean.value
filter(adult.mean, Fnlwgt == 198231 )
adult.mean.value
